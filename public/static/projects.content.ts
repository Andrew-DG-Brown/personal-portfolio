
export default {
    "defa": "<h1 id=\"reacttypescriptvite\">React + TypeScript + Vite</h1>\n<p>This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.</p>\n<p>Currently, two official plugins are available:</p>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md\" rel=\"noopener noreferrer\" target=\"_blank\">@vitejs/plugin-react</a> uses <a href=\"https://babeljs.io/\" rel=\"noopener noreferrer\" target=\"_blank\">Babel</a> for Fast Refresh</li>\n<li><a href=\"https://github.com/vitejs/vite-plugin-react-swc\" rel=\"noopener noreferrer\" target=\"_blank\">@vitejs/plugin-react-swc</a> uses <a href=\"https://swc.rs/\" rel=\"noopener noreferrer\" target=\"_blank\">SWC</a> for Fast Refresh</li>\n</ul>\n<h2 id=\"expandingtheeslintconfiguration\">Expanding the ESLint configuration</h2>\n<p>If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:</p>\n<ul>\n<li>Configure the top-level <code>parserOptions</code> property like this:</li>\n</ul>\n<pre><code class=\"js language-js\">export default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n</code></pre>\n<ul>\n<li>Replace <code>plugin:@typescript-eslint/recommended</code> to <code>plugin:@typescript-eslint/recommended-type-checked</code> or <code>plugin:@typescript-eslint/strict-type-checked</code></li>\n<li>Optionally add <code>plugin:@typescript-eslint/stylistic-type-checked</code></li>\n<li>Install <a href=\"https://github.com/jsx-eslint/eslint-plugin-react\" rel=\"noopener noreferrer\" target=\"_blank\">eslint-plugin-react</a> and add <code>plugin:react/recommended</code> &amp; <code>plugin:react/jsx-runtime</code> to the <code>extends</code> list</li>\n</ul>",
    "insightful-analytics": "<p>This project was initially developed as a result of an interview assignment. I was given to me was a large dataset of consumer product data in .csv format from an e-commerce analytics start-up based in the UK. I designed and developed Insightful Analytics from the ground up based upon the this extensive dataset. The end product is a flexible dashboard giving actionable business insights. </p>\n<p>The design and development of Insightful Analytics included:</p>\n<ul>\n<li>Relational SQL schema design</li>\n<li>Postgres database instance management/hosting with <a href=\"https://supabase.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Supabase</a></li>\n<li>Backend API architecture design and development with <a href=\"https://nodejs.org/en\" rel=\"noopener noreferrer\" target=\"_blank\">Node.js</a> and <a href=\"https://expressjs.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Express</a></li>\n<li>Query performance optimization with <a href=\"https://orm.drizzle.team/\" rel=\"noopener noreferrer\" target=\"_blank\">Drizzle ORM</a></li>\n<li>Frontend UI design and development with <a href=\"https://react.dev/\" rel=\"noopener noreferrer\" target=\"_blank\">React</a>/<a href=\"https://nextjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Nextjs</a></li>\n</ul>\n<h3 id=\"uimockup\">UI Mockup</h3>\n<p>First, I visually conceptualized what metrics the dashboard could show based on the data. This included some overall metrics along with navigation panes showing a line chart, bar chart, and detailed table:</p>\n<p><img src=\"/images/projects/insightful-mockup.jpg\" alt=\"mockup\" /></p>\n<p>This original mockup allowed me to understand how the application would use the data in it's target state. </p>\n<h3 id=\"designingtheschema\">Designing the schema</h3>\n<p>I then began designing the SQL schema based on the original dataset. The relations where generally static with the exception of the time based data. For this I constructed the schema around the product_info table:</p>\n<p><img src=\"/images/projects/insightful-schema.jpg\" alt=\"schema-design\" /></p>\n<p>This schema diagram was the final design iteration. Changes were made throughout the design to achieve the following:</p>\n<ul>\n<li>Multiple table indexes for efficient joins on selects</li>\n<li>Relational tables only for highly unique column values</li>\n<li>product table separation as multiple retailers sell the same product</li>\n</ul>\n<h3 id=\"apiuiintegration\">API/UI integration</h3>\n<p>Once the database was designed and deployed, the final step was setting up the API and frontend. For the backend server, I went with a straight forward <a href=\"https://nodejs.org/en\" rel=\"noopener noreferrer\" target=\"_blank\">Node.js</a>/<a href=\"https://expressjs.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Express</a> REST API. The server returned structured JSON payloads for each section of the UI, which included dynamically built configs for the select inputs.</p>\n<p>Here is a short video demo of Insightful Analytics in action:</p>\n<video autoplay muted loop>\n  <source src=\"/videos/projects/insightful-demo.mov\" type=\"video/mp4\">\n</video>"
}
